{
	"compiler": {
		"version": "0.8.18+commit.87f61d96"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "addr",
						"type": "address"
					}
				],
				"name": "codeHashOf",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "registrant",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "registrantToCopy",
						"type": "address"
					}
				],
				"name": "copyEntriesOf",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "registrant",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "filteredCodeHashAt",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "addr",
						"type": "address"
					}
				],
				"name": "filteredCodeHashes",
				"outputs": [
					{
						"internalType": "bytes32[]",
						"name": "",
						"type": "bytes32[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "registrant",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "filteredOperatorAt",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "addr",
						"type": "address"
					}
				],
				"name": "filteredOperators",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "registrant",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "codeHash",
						"type": "bytes32"
					}
				],
				"name": "isCodeHashFiltered",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "registrant",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "operatorWithCode",
						"type": "address"
					}
				],
				"name": "isCodeHashOfFiltered",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "registrant",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "isOperatorAllowed",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "registrant",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "isOperatorFiltered",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "addr",
						"type": "address"
					}
				],
				"name": "isRegistered",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "registrant",
						"type": "address"
					}
				],
				"name": "register",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "registrant",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "registrantToCopy",
						"type": "address"
					}
				],
				"name": "registerAndCopyEntries",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "registrant",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "subscription",
						"type": "address"
					}
				],
				"name": "registerAndSubscribe",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "registrant",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "registrantToSubscribe",
						"type": "address"
					}
				],
				"name": "subscribe",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "registrant",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "subscriberAt",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "registrant",
						"type": "address"
					}
				],
				"name": "subscribers",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "addr",
						"type": "address"
					}
				],
				"name": "subscriptionOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "registrant",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "addr",
						"type": "address"
					}
				],
				"name": "unregister",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "registrant",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "copyExistingEntries",
						"type": "bool"
					}
				],
				"name": "unsubscribe",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "registrant",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "codehash",
						"type": "bytes32"
					},
					{
						"internalType": "bool",
						"name": "filtered",
						"type": "bool"
					}
				],
				"name": "updateCodeHash",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "registrant",
						"type": "address"
					},
					{
						"internalType": "bytes32[]",
						"name": "codeHashes",
						"type": "bytes32[]"
					},
					{
						"internalType": "bool",
						"name": "filtered",
						"type": "bool"
					}
				],
				"name": "updateCodeHashes",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "registrant",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "filtered",
						"type": "bool"
					}
				],
				"name": "updateOperator",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "registrant",
						"type": "address"
					},
					{
						"internalType": "address[]",
						"name": "operators",
						"type": "address[]"
					},
					{
						"internalType": "bool",
						"name": "filtered",
						"type": "bool"
					}
				],
				"name": "updateOperators",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"codeHashOf(address)": {
					"details": "Convenience method to compute the code hash of an arbitrary contract"
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"copyEntriesOf(address,address)": {
					"notice": "Copy filtered operators and codeHashes from a different registrantToCopy to addr."
				},
				"filteredCodeHashAt(address,uint256)": {
					"notice": "Returns the filtered codeHash at the given index of the list of filtered codeHashes for a given address or         its subscription.         Note that order is not guaranteed as updates are made."
				},
				"filteredCodeHashes(address)": {
					"notice": "Returns the set of filtered codeHashes for a given address or its subscription.         Note that order is not guaranteed as updates are made."
				},
				"filteredOperatorAt(address,uint256)": {
					"notice": "Returns the filtered operator at the given index of the set of filtered operators for a given address or         its subscription.         Note that order is not guaranteed as updates are made."
				},
				"filteredOperators(address)": {
					"notice": "Returns a list of filtered operators for a given address or its subscription."
				},
				"isCodeHashFiltered(address,bytes32)": {
					"notice": "Returns true if a codeHash is filtered by a given address or its subscription."
				},
				"isCodeHashOfFiltered(address,address)": {
					"notice": "Returns true if the hash of an address's code is filtered by a given address or its subscription."
				},
				"isOperatorAllowed(address,address)": {
					"notice": "Returns true if operator is not filtered for a given token, either by address or codeHash. Also returns         true if supplied registrant address is not registered."
				},
				"isOperatorFiltered(address,address)": {
					"notice": "Returns true if operator is filtered by a given address or its subscription."
				},
				"isRegistered(address)": {
					"notice": "Returns true if an address has registered"
				},
				"register(address)": {
					"notice": "Registers an address with the registry. May be called by address itself or by EIP-173 owner."
				},
				"registerAndCopyEntries(address,address)": {
					"notice": "Registers an address with the registry and copies the filtered operators and codeHashes from another         address without subscribing."
				},
				"registerAndSubscribe(address,address)": {
					"notice": "Registers an address with the registry and \"subscribes\" to another address's filtered operators and codeHashes."
				},
				"subscribe(address,address)": {
					"notice": "Subscribe an address to another registrant's filtered operators and codeHashes. Will remove previous         subscription if present.         Note that accounts with subscriptions may go on to subscribe to other accounts - in this case,         subscriptions will not be forwarded. Instead the former subscription's existing entries will still be         used."
				},
				"subscriberAt(address,uint256)": {
					"notice": "Get the subscriber at a given index in the set of addresses subscribed to a given registrant.         Note that order is not guaranteed as updates are made."
				},
				"subscribers(address)": {
					"notice": "Get the set of addresses subscribed to a given registrant.         Note that order is not guaranteed as updates are made."
				},
				"subscriptionOf(address)": {
					"notice": "Get the subscription address of a given registrant, if any."
				},
				"unregister(address)": {
					"notice": "Unregisters an address with the registry and removes its subscription. May be called by address itself or by EIP-173 owner.         Note that this does not remove any filtered addresses or codeHashes.         Also note that any subscriptions to this registrant will still be active and follow the existing filtered addresses and codehashes."
				},
				"unsubscribe(address,bool)": {
					"notice": "Unsubscribe an address from its current subscribed registrant, and optionally copy its filtered operators and codeHashes."
				},
				"updateCodeHash(address,bytes32,bool)": {
					"notice": "Update a codeHash for a registered address - when filtered is true, the codeHash is filtered."
				},
				"updateCodeHashes(address,bytes32[],bool)": {
					"notice": "Update multiple codeHashes for a registered address - when filtered is true, the codeHashes will be filtered. Reverts on duplicates."
				},
				"updateOperator(address,address,bool)": {
					"notice": "Update an operator address for a registered address - when filtered is true, the operator is filtered."
				},
				"updateOperators(address,address[],bool)": {
					"notice": "Update multiple operators for a registered address - when filtered is true, the operators will be filtered. Reverts on duplicates."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/FireSeed_main_flattened.sol": "IOperatorFilterRegistry"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/FireSeed_main_flattened.sol": {
			"keccak256": "0xca882c26f2804d2df2c34e24cafdd6405469bb3d4170b939422228d9b49a3cff",
			"license": "MIT",
			"urls": [
				"bzz-raw://f300caa9cc17b0c135ee60632ec8983c10750cb7e52ae1d79c939d4e13cc3d32",
				"dweb:/ipfs/QmWvrFXpSTbq1ghtJXp9kPhtBuvxyBpUvn4DSAqpXwHf5f"
			]
		}
	},
	"version": 1
}